name: Lint and Format Check

on:
  pull_request:
    branches:
      - main
      - 8.0-dev
  push:
    branches:
      - main
      - 8.0-dev

jobs:
  lint-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # --- C++ ---
      - name: Install dependencies for C++
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-format cppcheck

      - name: Check C++ formatting with clang-format
        run: |
          git fetch origin main
          BASE_COMMIT=$(git merge-base origin/main HEAD)
          git diff -U0 $BASE_COMMIT -- '*.[ch]pp' '*.[ch]' '*.cc' | clang-format-diff -p1 --Werror

      - name: Run cppcheck static analysis
        run: |
          cppcheck --enable=all --inconclusive --error-exitcode=1 --std=c++17 --quiet modules

      # --- JavaScript/TypeScript ---
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies for JS/TS
        run: npm ci

      - name: Run ESLint lint check
        run: npx eslint --ext .js,.jsx,.ts,.tsx .

      - name: Check Prettier formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md,yml,yaml}"

      # --- Python ---
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8

      - name: Check Python formatting with Black
        run: black --check .

      - name: Run Python lint with flake8
        run: flake8 .

      - name: Print error on failure
        if: ${{ always() }}
        run: |
          if [[ '${{ job.status }}' == 'failure' ]]; then
            echo "::error::[Job: lint-format] Lint or formatting check failed. Please fix the issues."
          fi
